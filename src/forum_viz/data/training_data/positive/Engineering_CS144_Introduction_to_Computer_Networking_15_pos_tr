0:<[Autumn Quarter Exam Schedule:](http://studentaffairs.stanford.edu/registrar/students/autumn-exams)
> Classes meeting 3:15, 4:15 p.m., except classes meeting only on Tues. and/or Thurs; (Sat) will have final exams on Thursday, December 12, 2013 from 12:15-3:15 p.m.>
1:<When you look at the ec2_ssh.sh, you should see a line like this:

    ssh -Y -i /afs/ir/users/a/n/<nameRedac_anon_screen_name_redacted>/Documents/CS144/ec2_script/credential/<nameRedac_anon_screen_name_redacted>as_EC2_1.pem ubuntu@54.208.203.227

The <nameRedac_anon_screen_name_redacted>as_EC2_1.pem is the private key used to log in. EC2 does not allow using password for ssh access. I think the easiest way to download files from your instance is to uses scp with this private key.

    scp -i path_to_key.pem ubuntu@ip_address:path_to_file_on_instance local_destination_path

Do not forget the colon between the IP address and the path. You can use this to download files from the instance to the myth cluster.

Alternatively, if you want to be able to ssh/scp directly from your laptop, you can either download the .pem file to your laptop (not good practice) or add your laptop's private key to the ~/.ssh/authorized_keys file on the EC2 instance.>
2:<To maintain the infallibility of Stanford CS, at the time of the last copyright in the source (2000), there were still 5 years to go with Apple shipping PPC systems, which was a big endian chipset, so at the time this wasn't a bug. Since Apple switched to Intel in 2005, Darwin is run almost exclusively on x86 Intel chips (except for stupidly old beige boxes), and the started code should be updated. Good spot. Cheers. :)>
3:<When I try to make a request to the first server from my local machine, the ec2 instance appears to hang. A wget request from myth works, so I thought I needed to add a security rule in ec2, but after adding the HTTP source 0.0.0.0/0 (making sure to apply changes), nothing changed. When I curl from my local machine, the POX output looks the same except when a packet is being set up, I see this error: 

    INFO:packet:(tcp parse) warning TCP data offset too long or too short 7

Looking at the pox source, the error is triggered from

     if (self.off * 4) < self.MIN_LEN or (self.off * 4) > dlen :
                self.msg('(tcp parse) warning TCP data offset too long or too short %u' % (self.off,))
      
The TCP packet data is long enough to parse the header.

According to wikipedia, each packet's data offset (which specifies the size of the TCP header in 32-bit words) must be between 5 and 15 words.

What could be causing the invalid packet data offset?>
4:<I think I sent an email to the class email list. Here's the video URL:

http://www.youtube.com/watch?feature=player_embedded&v=U_Efpken0kA

Her's a copy of the slides:

http://csl.stanford.edu/~pal/cs144/2012-stanford-jfp-clean.pdf>
5:<Mininet is a convenient wrapper around tools already available in Linux to help you create a network on a single machine.

Mininet relies on OpenVSwitch, a kernel module, to do the "packet switching" needed to make your network work.

OpenVSwitch by itself doesn't do much; it needs to be instructed how to forward packets.  Since this logic can be quite complex, it is delegated to a user-space "controller" through a standard API (this happens to be OpenFlow in our case).

POX, from our friends at Berkeley, is one such user-space controller that happens to be convenient to use. :)

Hope this helps,>
6:<Drop the packet.

The writeup is meant to be a useful guideline, not a pseudocode that precisely states every single detail! :)>
7:<The minimum frame length for Ethernet is 64Bytes, which includes a link-layer frame check sequence.  So, in Wireshark, you are likely to see at least 60Bytes per packet.

http://wiki.wireshark.org/Ethernet

The reason why this is 64Bytes has to do with collision detection to handle scenarios where Ethernet was designed to operate.  I think you will learn it later in the course. :)>
8:<Endianness is usually associated with a basic integer type (e.g. int, long int, etc.) and not for an entire structure.

So which field within sr_instance are you referring to?

Your confusion is very valid. :)  The Linux Kernel adopts a useful convention where "unsigned int" is typedef'd into `be32` and `le32` to unambiguously specify the endianness.>
9:<You can find all the interfaces of your router in sr_if.c. You'd want to search that list by your packet destination IP. =)>
10:<Your test input will be in the same traditional format as the rtable file you were given. :)  But the netmask could have different values....>
11:<Cksum seems to be a ready-made function that can be just used directly to check for packet corruptness. What am I missing? Do I need the sha1.c file etc or is it as simple as just using the cksum function? Thanks :)>
12:<Thanks :)>
13:<You can allocate new memory if you want to be safe.  It's better to consume a bit more memory than crash and lose points in your final test. :)>
14:<Here's what Wikipedia says about [ethernet frames][1]. I am pretty sure, for this assignment, we mean the frame minus the preamble and CRC (both of them are dealt with in the hardware itself, right?). At least, that is how wireshark shows me stuff. Please correct me if this is not the case :)

  [1]: http://en.wikipedia.org/wiki/Ethernet_frame#Preamble_and_start_frame_delimiter>
